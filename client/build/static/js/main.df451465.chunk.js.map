{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","state","images","progress","preventDefaults","e","preventDefault","stopPropagation","uploadFile","files","formData","FormData","setState","forEach","file","append","name","axios","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","then","res","previewFile","data","setTimeout","catch","err","console","log","removePreviewImage","index","target","getAttribute","splice","concat","handleDrop","dataTransfer","Array","from","handleDragOver","handleInputByClick","drop_region_container","document","getElementById","input","eventName","addEventListener","classList","add","remove","click","this","className","id","onDrop","onDragOver","src","width","alt","type","multiple","onChange","role","aria-valuenow","aria-valuemin","aria-valuemax","style","map","img","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.df451465.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    images: [],\n    progress: 0,\n  };\n  preventDefaults = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  uploadFile = files => {\n    const formData = new FormData();\n    this.setState({\n      progress: 0,\n    });\n    files.forEach(file => {\n      formData.append(\"files\", file, file.name);\n    });\n    axios\n      .post(\"/upload-image\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n        onUploadProgress: progressEvent => {\n          this.setState({\n            progress: parseInt(\n              Math.round((progressEvent.loaded * 100) / progressEvent.total)\n            ),\n          });\n        },\n      })\n      .then(res => {\n        this.previewFile(res.data);\n        setTimeout(() => {\n          this.setState({\n            progress: 0,\n          });\n        }, 3000);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  removePreviewImage = e => {\n    const index = e.target.getAttribute(\"index\");\n    const images = this.state.images;\n    images.splice(index, 1);\n    this.setState(images);\n  };\n\n  previewFile = data => {\n    const images = this.state.images;\n    this.setState({ images: images.concat(data) });\n  };\n\n  handleDrop = e => {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    this.uploadFile(Array.from(files));\n  };\n\n  handleDragOver = e => {\n    e.preventDefault();\n  };\n\n  handleInputByClick = e => {\n    this.uploadFile(Array.from(e.target.files));\n  };\n\n  componentDidMount() {\n    const drop_region_container = document.getElementById(\n      \"drop-region-container\"\n    );\n    const input = document.getElementById(\"file-input\");\n    [\"dragenter\", \"dragover\"].forEach(eventName => {\n      drop_region_container.addEventListener(eventName, () => {\n        drop_region_container.classList.add(\"highlight\");\n      });\n    });\n    [\"dragleave\", \"drop\"].forEach(eventName => {\n      drop_region_container.addEventListener(eventName, () => {\n        drop_region_container.classList.remove(\"highlight\");\n      });\n    });\n\n    // click to upload\n    drop_region_container.addEventListener(\"click\", () => {\n      input.click();\n    });\n  }\n\n  render() {\n    const { progress } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Drag and Drop Image Uploader with AWS S3</h1>\n          <div\n            id=\"drop-region-container\"\n            className=\"drop-region-container mx-auto\"\n            onDrop={this.handleDrop}\n            onDragOver={this.handleDragOver}\n          >\n            <div id=\"drop-region\" className=\"drop-region text-center\">\n              <img id=\"download-btn\" src=\"/Download.png\" width=\"80\" alt=\"\" />\n              <h2>Drag and Drop or Click to Upload</h2>\n              <input\n                id=\"file-input\"\n                type=\"file\"\n                multiple\n                onChange={this.handleInputByClick}\n              />\n            </div>\n          </div>\n          <p className=\"mx-auto\">\n            <strong>Uploading Progress</strong>\n          </p>\n          <div className=\"progress mx-auto\">\n            <div\n              id=\"progress-bar\"\n              className=\"progress-bar progress-bar-striped bg-info\"\n              role=\"progressbar\"\n              aria-valuenow=\"40\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              style={{ width: `${progress}%` }}\n            >\n              {progress}%\n            </div>\n          </div>\n\n          <div id=\"preview\" className=\"mx-auto\">\n            {this.state.images.map((img, index) => (\n              <Fragment key={index}>\n                <img src={img} alt=\"\" />\n                <button\n                  className=\"btn btn-danger btn-block mx-auto\"\n                  onClick={this.removePreviewImage}\n                >\n                  Delete\n                </button>\n              </Fragment>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}